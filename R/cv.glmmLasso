


cv.glmmLasso <- function(fix, rnd, data, family, kfold, lambdas, nlambdas, lambda.min.ratio, ...)
{
    # need to rewrite this with rsample
    # 
    # building randomIndices to cut up data for cross-validation
    randomIndices <- sample(nrow(data))
    
    
    # building data frame to map a specific row to kth group  
    rowDF <- tibble::tibble(
        row=seq(nrow(data)),
        group=sample(rep(seq(kfold), length.out=nrow(data)), replace = FALSE)
    )
    
    # sorting by group 
    rowDF <- rowDF %>% dplyr::arrange(group)
    
    # instantiating the standard set of lambdas, lowering by step
    #lambdas = seq(from = 500, to = 1, by = -step)
    
    for(k in unique(rowDF$group))
    {
        testIndices <- rowDF %>% filter(group == k) %>% pull(row)
        trainIndices <- -testIndices
        
       
        
        
        modk <- glmmLasso_MultLambdas(fix = fix,
                                      rnd = rnd,
                                      data = data,
                                      family = family,
                                      lambdas = lambdas,
                                      nlambdas = nlambdas,
                                      lambda.min.ratio = lambda.min.ratio,
                                      ...)
        # continue here once have written the compute error function and predict function
        # as we need to generate the error matrix (5 folds row by 100 col of lambda) to calculate
        # the column mean of each lambda 1 - lambda 100.
    }
    
}